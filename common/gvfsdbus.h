/*
 * Generated by gdbus-codegen 2.41.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GVFSDBUS_H__
#define __GVFSDBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Daemon */

#define GVFS_DBUS_TYPE_DAEMON (gvfs_dbus_daemon_get_type ())
#define GVFS_DBUS_DAEMON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_DAEMON, GVfsDBusDaemon))
#define GVFS_DBUS_IS_DAEMON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_DAEMON))
#define GVFS_DBUS_DAEMON_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_DAEMON, GVfsDBusDaemonIface))

struct _GVfsDBusDaemon;
typedef struct _GVfsDBusDaemon GVfsDBusDaemon;
typedef struct _GVfsDBusDaemonIface GVfsDBusDaemonIface;

struct _GVfsDBusDaemonIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_cancel) (
    GVfsDBusDaemon *object,
    GDBusMethodInvocation *invocation,
    guint arg_serial);

  gboolean (*handle_get_connection) (
    GVfsDBusDaemon *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_mount) (
    GVfsDBusDaemon *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_automount,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path);

};

GType gvfs_dbus_daemon_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_daemon_interface_info (void);
guint gvfs_dbus_daemon_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_daemon_complete_get_connection (
    GVfsDBusDaemon *object,
    GDBusMethodInvocation *invocation,
    const gchar *address1,
    const gchar *address2);

void gvfs_dbus_daemon_complete_cancel (
    GVfsDBusDaemon *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_daemon_complete_mount (
    GVfsDBusDaemon *object,
    GDBusMethodInvocation *invocation,
    GVariant *reply);



/* D-Bus method calls: */
void gvfs_dbus_daemon_call_get_connection (
    GVfsDBusDaemon *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_daemon_call_get_connection_finish (
    GVfsDBusDaemon *proxy,
    gchar **out_address1,
    gchar **out_address2,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_daemon_call_get_connection_sync (
    GVfsDBusDaemon *proxy,
    gchar **out_address1,
    gchar **out_address2,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_daemon_call_cancel (
    GVfsDBusDaemon *proxy,
    guint arg_serial,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_daemon_call_cancel_finish (
    GVfsDBusDaemon *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_daemon_call_cancel_sync (
    GVfsDBusDaemon *proxy,
    guint arg_serial,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_daemon_call_mount (
    GVfsDBusDaemon *proxy,
    gboolean arg_automount,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_daemon_call_mount_finish (
    GVfsDBusDaemon *proxy,
    GVariant **out_reply,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_daemon_call_mount_sync (
    GVfsDBusDaemon *proxy,
    gboolean arg_automount,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GVariant **out_reply,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_DAEMON_PROXY (gvfs_dbus_daemon_proxy_get_type ())
#define GVFS_DBUS_DAEMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_DAEMON_PROXY, GVfsDBusDaemonProxy))
#define GVFS_DBUS_DAEMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_DAEMON_PROXY, GVfsDBusDaemonProxyClass))
#define GVFS_DBUS_DAEMON_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_DAEMON_PROXY, GVfsDBusDaemonProxyClass))
#define GVFS_DBUS_IS_DAEMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_DAEMON_PROXY))
#define GVFS_DBUS_IS_DAEMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_DAEMON_PROXY))

typedef struct _GVfsDBusDaemonProxy GVfsDBusDaemonProxy;
typedef struct _GVfsDBusDaemonProxyClass GVfsDBusDaemonProxyClass;
typedef struct _GVfsDBusDaemonProxyPrivate GVfsDBusDaemonProxyPrivate;

struct _GVfsDBusDaemonProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusDaemonProxyPrivate *priv;
};

struct _GVfsDBusDaemonProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_daemon_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_daemon_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusDaemon *gvfs_dbus_daemon_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusDaemon *gvfs_dbus_daemon_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_daemon_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusDaemon *gvfs_dbus_daemon_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusDaemon *gvfs_dbus_daemon_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_DAEMON_SKELETON (gvfs_dbus_daemon_skeleton_get_type ())
#define GVFS_DBUS_DAEMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_DAEMON_SKELETON, GVfsDBusDaemonSkeleton))
#define GVFS_DBUS_DAEMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_DAEMON_SKELETON, GVfsDBusDaemonSkeletonClass))
#define GVFS_DBUS_DAEMON_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_DAEMON_SKELETON, GVfsDBusDaemonSkeletonClass))
#define GVFS_DBUS_IS_DAEMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_DAEMON_SKELETON))
#define GVFS_DBUS_IS_DAEMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_DAEMON_SKELETON))

typedef struct _GVfsDBusDaemonSkeleton GVfsDBusDaemonSkeleton;
typedef struct _GVfsDBusDaemonSkeletonClass GVfsDBusDaemonSkeletonClass;
typedef struct _GVfsDBusDaemonSkeletonPrivate GVfsDBusDaemonSkeletonPrivate;

struct _GVfsDBusDaemonSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusDaemonSkeletonPrivate *priv;
};

struct _GVfsDBusDaemonSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_daemon_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusDaemon *gvfs_dbus_daemon_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Spawner */

#define GVFS_DBUS_TYPE_SPAWNER (gvfs_dbus_spawner_get_type ())
#define GVFS_DBUS_SPAWNER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_SPAWNER, GVfsDBusSpawner))
#define GVFS_DBUS_IS_SPAWNER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_SPAWNER))
#define GVFS_DBUS_SPAWNER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_SPAWNER, GVfsDBusSpawnerIface))

struct _GVfsDBusSpawner;
typedef struct _GVfsDBusSpawner GVfsDBusSpawner;
typedef struct _GVfsDBusSpawnerIface GVfsDBusSpawnerIface;

struct _GVfsDBusSpawnerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_spawned) (
    GVfsDBusSpawner *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_succeeded,
    const gchar *arg_error_message,
    guint arg_error_code);

};

GType gvfs_dbus_spawner_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_spawner_interface_info (void);
guint gvfs_dbus_spawner_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_spawner_complete_spawned (
    GVfsDBusSpawner *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_spawner_call_spawned (
    GVfsDBusSpawner *proxy,
    gboolean arg_succeeded,
    const gchar *arg_error_message,
    guint arg_error_code,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_spawner_call_spawned_finish (
    GVfsDBusSpawner *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_spawner_call_spawned_sync (
    GVfsDBusSpawner *proxy,
    gboolean arg_succeeded,
    const gchar *arg_error_message,
    guint arg_error_code,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_SPAWNER_PROXY (gvfs_dbus_spawner_proxy_get_type ())
#define GVFS_DBUS_SPAWNER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_SPAWNER_PROXY, GVfsDBusSpawnerProxy))
#define GVFS_DBUS_SPAWNER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_SPAWNER_PROXY, GVfsDBusSpawnerProxyClass))
#define GVFS_DBUS_SPAWNER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_SPAWNER_PROXY, GVfsDBusSpawnerProxyClass))
#define GVFS_DBUS_IS_SPAWNER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_SPAWNER_PROXY))
#define GVFS_DBUS_IS_SPAWNER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_SPAWNER_PROXY))

typedef struct _GVfsDBusSpawnerProxy GVfsDBusSpawnerProxy;
typedef struct _GVfsDBusSpawnerProxyClass GVfsDBusSpawnerProxyClass;
typedef struct _GVfsDBusSpawnerProxyPrivate GVfsDBusSpawnerProxyPrivate;

struct _GVfsDBusSpawnerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusSpawnerProxyPrivate *priv;
};

struct _GVfsDBusSpawnerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_spawner_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_spawner_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusSpawner *gvfs_dbus_spawner_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusSpawner *gvfs_dbus_spawner_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_spawner_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusSpawner *gvfs_dbus_spawner_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusSpawner *gvfs_dbus_spawner_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_SPAWNER_SKELETON (gvfs_dbus_spawner_skeleton_get_type ())
#define GVFS_DBUS_SPAWNER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_SPAWNER_SKELETON, GVfsDBusSpawnerSkeleton))
#define GVFS_DBUS_SPAWNER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_SPAWNER_SKELETON, GVfsDBusSpawnerSkeletonClass))
#define GVFS_DBUS_SPAWNER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_SPAWNER_SKELETON, GVfsDBusSpawnerSkeletonClass))
#define GVFS_DBUS_IS_SPAWNER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_SPAWNER_SKELETON))
#define GVFS_DBUS_IS_SPAWNER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_SPAWNER_SKELETON))

typedef struct _GVfsDBusSpawnerSkeleton GVfsDBusSpawnerSkeleton;
typedef struct _GVfsDBusSpawnerSkeletonClass GVfsDBusSpawnerSkeletonClass;
typedef struct _GVfsDBusSpawnerSkeletonPrivate GVfsDBusSpawnerSkeletonPrivate;

struct _GVfsDBusSpawnerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusSpawnerSkeletonPrivate *priv;
};

struct _GVfsDBusSpawnerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_spawner_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusSpawner *gvfs_dbus_spawner_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.MountTracker */

#define GVFS_DBUS_TYPE_MOUNT_TRACKER (gvfs_dbus_mount_tracker_get_type ())
#define GVFS_DBUS_MOUNT_TRACKER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER, GVfsDBusMountTracker))
#define GVFS_DBUS_IS_MOUNT_TRACKER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER))
#define GVFS_DBUS_MOUNT_TRACKER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER, GVfsDBusMountTrackerIface))

struct _GVfsDBusMountTracker;
typedef struct _GVfsDBusMountTracker GVfsDBusMountTracker;
typedef struct _GVfsDBusMountTrackerIface GVfsDBusMountTrackerIface;

struct _GVfsDBusMountTrackerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_list_mount_types) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_mountable_info) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_mounts) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_lookup_mount) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_mount_spec);

  gboolean (*handle_lookup_mount_by_fuse_path) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fuse_path);

  gboolean (*handle_mount_location) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_mount_spec,
    GVariant *arg_mount_source);

  gboolean (*handle_register_fuse) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_mount) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_obj_path,
    const gchar *arg_display_name,
    const gchar *arg_stable_name,
    const gchar *arg_x_content_types,
    const gchar *arg_icon,
    const gchar *arg_symbolic_icon,
    const gchar *arg_prefered_filename_encoding,
    gboolean arg_user_visible,
    GVariant *arg_mount_spec,
    const gchar *arg_default_location);

  gboolean (*handle_unregister_mount) (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_obj_path);

  void (*mounted) (
    GVfsDBusMountTracker *object,
    GVariant *arg_mount);

  void (*unmounted) (
    GVfsDBusMountTracker *object,
    GVariant *arg_mount);

};

GType gvfs_dbus_mount_tracker_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_mount_tracker_interface_info (void);
guint gvfs_dbus_mount_tracker_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_mount_tracker_complete_lookup_mount (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    GVariant *mount);

void gvfs_dbus_mount_tracker_complete_lookup_mount_by_fuse_path (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    GVariant *mount);

void gvfs_dbus_mount_tracker_complete_mount_location (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_tracker_complete_list_mounts (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    GVariant *mounts);

void gvfs_dbus_mount_tracker_complete_register_mount (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_tracker_complete_unregister_mount (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_tracker_complete_list_mount_types (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *mount_types);

void gvfs_dbus_mount_tracker_complete_list_mountable_info (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation,
    GVariant *mountables);

void gvfs_dbus_mount_tracker_complete_register_fuse (
    GVfsDBusMountTracker *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gvfs_dbus_mount_tracker_emit_mounted (
    GVfsDBusMountTracker *object,
    GVariant *arg_mount);

void gvfs_dbus_mount_tracker_emit_unmounted (
    GVfsDBusMountTracker *object,
    GVariant *arg_mount);



/* D-Bus method calls: */
void gvfs_dbus_mount_tracker_call_lookup_mount (
    GVfsDBusMountTracker *proxy,
    GVariant *arg_mount_spec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_lookup_mount_finish (
    GVfsDBusMountTracker *proxy,
    GVariant **out_mount,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_lookup_mount_sync (
    GVfsDBusMountTracker *proxy,
    GVariant *arg_mount_spec,
    GVariant **out_mount,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_lookup_mount_by_fuse_path (
    GVfsDBusMountTracker *proxy,
    const gchar *arg_fuse_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_lookup_mount_by_fuse_path_finish (
    GVfsDBusMountTracker *proxy,
    GVariant **out_mount,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_lookup_mount_by_fuse_path_sync (
    GVfsDBusMountTracker *proxy,
    const gchar *arg_fuse_path,
    GVariant **out_mount,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_mount_location (
    GVfsDBusMountTracker *proxy,
    GVariant *arg_mount_spec,
    GVariant *arg_mount_source,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_mount_location_finish (
    GVfsDBusMountTracker *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_mount_location_sync (
    GVfsDBusMountTracker *proxy,
    GVariant *arg_mount_spec,
    GVariant *arg_mount_source,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_list_mounts (
    GVfsDBusMountTracker *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_list_mounts_finish (
    GVfsDBusMountTracker *proxy,
    GVariant **out_mounts,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_list_mounts_sync (
    GVfsDBusMountTracker *proxy,
    GVariant **out_mounts,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_register_mount (
    GVfsDBusMountTracker *proxy,
    const gchar *arg_obj_path,
    const gchar *arg_display_name,
    const gchar *arg_stable_name,
    const gchar *arg_x_content_types,
    const gchar *arg_icon,
    const gchar *arg_symbolic_icon,
    const gchar *arg_prefered_filename_encoding,
    gboolean arg_user_visible,
    GVariant *arg_mount_spec,
    const gchar *arg_default_location,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_register_mount_finish (
    GVfsDBusMountTracker *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_register_mount_sync (
    GVfsDBusMountTracker *proxy,
    const gchar *arg_obj_path,
    const gchar *arg_display_name,
    const gchar *arg_stable_name,
    const gchar *arg_x_content_types,
    const gchar *arg_icon,
    const gchar *arg_symbolic_icon,
    const gchar *arg_prefered_filename_encoding,
    gboolean arg_user_visible,
    GVariant *arg_mount_spec,
    const gchar *arg_default_location,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_unregister_mount (
    GVfsDBusMountTracker *proxy,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_unregister_mount_finish (
    GVfsDBusMountTracker *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_unregister_mount_sync (
    GVfsDBusMountTracker *proxy,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_list_mount_types (
    GVfsDBusMountTracker *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_list_mount_types_finish (
    GVfsDBusMountTracker *proxy,
    gchar ***out_mount_types,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_list_mount_types_sync (
    GVfsDBusMountTracker *proxy,
    gchar ***out_mount_types,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_list_mountable_info (
    GVfsDBusMountTracker *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_list_mountable_info_finish (
    GVfsDBusMountTracker *proxy,
    GVariant **out_mountables,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_list_mountable_info_sync (
    GVfsDBusMountTracker *proxy,
    GVariant **out_mountables,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_tracker_call_register_fuse (
    GVfsDBusMountTracker *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_tracker_call_register_fuse_finish (
    GVfsDBusMountTracker *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_tracker_call_register_fuse_sync (
    GVfsDBusMountTracker *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_MOUNT_TRACKER_PROXY (gvfs_dbus_mount_tracker_proxy_get_type ())
#define GVFS_DBUS_MOUNT_TRACKER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER_PROXY, GVfsDBusMountTrackerProxy))
#define GVFS_DBUS_MOUNT_TRACKER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNT_TRACKER_PROXY, GVfsDBusMountTrackerProxyClass))
#define GVFS_DBUS_MOUNT_TRACKER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER_PROXY, GVfsDBusMountTrackerProxyClass))
#define GVFS_DBUS_IS_MOUNT_TRACKER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER_PROXY))
#define GVFS_DBUS_IS_MOUNT_TRACKER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNT_TRACKER_PROXY))

typedef struct _GVfsDBusMountTrackerProxy GVfsDBusMountTrackerProxy;
typedef struct _GVfsDBusMountTrackerProxyClass GVfsDBusMountTrackerProxyClass;
typedef struct _GVfsDBusMountTrackerProxyPrivate GVfsDBusMountTrackerProxyPrivate;

struct _GVfsDBusMountTrackerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusMountTrackerProxyPrivate *priv;
};

struct _GVfsDBusMountTrackerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_mount_tracker_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_mount_tracker_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMountTracker *gvfs_dbus_mount_tracker_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMountTracker *gvfs_dbus_mount_tracker_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_mount_tracker_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMountTracker *gvfs_dbus_mount_tracker_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMountTracker *gvfs_dbus_mount_tracker_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_MOUNT_TRACKER_SKELETON (gvfs_dbus_mount_tracker_skeleton_get_type ())
#define GVFS_DBUS_MOUNT_TRACKER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER_SKELETON, GVfsDBusMountTrackerSkeleton))
#define GVFS_DBUS_MOUNT_TRACKER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNT_TRACKER_SKELETON, GVfsDBusMountTrackerSkeletonClass))
#define GVFS_DBUS_MOUNT_TRACKER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER_SKELETON, GVfsDBusMountTrackerSkeletonClass))
#define GVFS_DBUS_IS_MOUNT_TRACKER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_TRACKER_SKELETON))
#define GVFS_DBUS_IS_MOUNT_TRACKER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNT_TRACKER_SKELETON))

typedef struct _GVfsDBusMountTrackerSkeleton GVfsDBusMountTrackerSkeleton;
typedef struct _GVfsDBusMountTrackerSkeletonClass GVfsDBusMountTrackerSkeletonClass;
typedef struct _GVfsDBusMountTrackerSkeletonPrivate GVfsDBusMountTrackerSkeletonPrivate;

struct _GVfsDBusMountTrackerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusMountTrackerSkeletonPrivate *priv;
};

struct _GVfsDBusMountTrackerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_mount_tracker_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusMountTracker *gvfs_dbus_mount_tracker_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Mountable */

#define GVFS_DBUS_TYPE_MOUNTABLE (gvfs_dbus_mountable_get_type ())
#define GVFS_DBUS_MOUNTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNTABLE, GVfsDBusMountable))
#define GVFS_DBUS_IS_MOUNTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNTABLE))
#define GVFS_DBUS_MOUNTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_MOUNTABLE, GVfsDBusMountableIface))

struct _GVfsDBusMountable;
typedef struct _GVfsDBusMountable GVfsDBusMountable;
typedef struct _GVfsDBusMountableIface GVfsDBusMountableIface;

struct _GVfsDBusMountableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_mount) (
    GVfsDBusMountable *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_mount_spec,
    gboolean arg_automount,
    GVariant *arg_mount_source);

};

GType gvfs_dbus_mountable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_mountable_interface_info (void);
guint gvfs_dbus_mountable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_mountable_complete_mount (
    GVfsDBusMountable *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_mountable_call_mount (
    GVfsDBusMountable *proxy,
    GVariant *arg_mount_spec,
    gboolean arg_automount,
    GVariant *arg_mount_source,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mountable_call_mount_finish (
    GVfsDBusMountable *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mountable_call_mount_sync (
    GVfsDBusMountable *proxy,
    GVariant *arg_mount_spec,
    gboolean arg_automount,
    GVariant *arg_mount_source,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_MOUNTABLE_PROXY (gvfs_dbus_mountable_proxy_get_type ())
#define GVFS_DBUS_MOUNTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNTABLE_PROXY, GVfsDBusMountableProxy))
#define GVFS_DBUS_MOUNTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNTABLE_PROXY, GVfsDBusMountableProxyClass))
#define GVFS_DBUS_MOUNTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNTABLE_PROXY, GVfsDBusMountableProxyClass))
#define GVFS_DBUS_IS_MOUNTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNTABLE_PROXY))
#define GVFS_DBUS_IS_MOUNTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNTABLE_PROXY))

typedef struct _GVfsDBusMountableProxy GVfsDBusMountableProxy;
typedef struct _GVfsDBusMountableProxyClass GVfsDBusMountableProxyClass;
typedef struct _GVfsDBusMountableProxyPrivate GVfsDBusMountableProxyPrivate;

struct _GVfsDBusMountableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusMountableProxyPrivate *priv;
};

struct _GVfsDBusMountableProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_mountable_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_mountable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMountable *gvfs_dbus_mountable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMountable *gvfs_dbus_mountable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_mountable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMountable *gvfs_dbus_mountable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMountable *gvfs_dbus_mountable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_MOUNTABLE_SKELETON (gvfs_dbus_mountable_skeleton_get_type ())
#define GVFS_DBUS_MOUNTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNTABLE_SKELETON, GVfsDBusMountableSkeleton))
#define GVFS_DBUS_MOUNTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNTABLE_SKELETON, GVfsDBusMountableSkeletonClass))
#define GVFS_DBUS_MOUNTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNTABLE_SKELETON, GVfsDBusMountableSkeletonClass))
#define GVFS_DBUS_IS_MOUNTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNTABLE_SKELETON))
#define GVFS_DBUS_IS_MOUNTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNTABLE_SKELETON))

typedef struct _GVfsDBusMountableSkeleton GVfsDBusMountableSkeleton;
typedef struct _GVfsDBusMountableSkeletonClass GVfsDBusMountableSkeletonClass;
typedef struct _GVfsDBusMountableSkeletonPrivate GVfsDBusMountableSkeletonPrivate;

struct _GVfsDBusMountableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusMountableSkeletonPrivate *priv;
};

struct _GVfsDBusMountableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_mountable_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusMountable *gvfs_dbus_mountable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.MountOperation */

#define GVFS_DBUS_TYPE_MOUNT_OPERATION (gvfs_dbus_mount_operation_get_type ())
#define GVFS_DBUS_MOUNT_OPERATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION, GVfsDBusMountOperation))
#define GVFS_DBUS_IS_MOUNT_OPERATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION))
#define GVFS_DBUS_MOUNT_OPERATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION, GVfsDBusMountOperationIface))

struct _GVfsDBusMountOperation;
typedef struct _GVfsDBusMountOperation GVfsDBusMountOperation;
typedef struct _GVfsDBusMountOperationIface GVfsDBusMountOperationIface;

struct _GVfsDBusMountOperationIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_aborted) (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_ask_password) (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message_string,
    const gchar *arg_default_user,
    const gchar *arg_default_domain,
    guint arg_flags_as_int);

  gboolean (*handle_ask_question) (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message_string,
    const gchar *const *arg_choices);

  gboolean (*handle_show_processes) (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message_string,
    const gchar *const *arg_choices,
    GVariant *arg_processes);

  gboolean (*handle_show_unmount_progress) (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message_string,
    gint64 arg_time_left,
    gint64 arg_bytes_left);

};

GType gvfs_dbus_mount_operation_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_mount_operation_interface_info (void);
guint gvfs_dbus_mount_operation_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_mount_operation_complete_ask_password (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    gboolean handled,
    gboolean aborted,
    const gchar *password,
    const gchar *username,
    const gchar *domain,
    gboolean anonymous,
    guint password_save);

void gvfs_dbus_mount_operation_complete_ask_question (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    gboolean handled,
    gboolean aborted,
    guint choice);

void gvfs_dbus_mount_operation_complete_show_processes (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation,
    gboolean handled,
    gboolean aborted,
    guint choice);

void gvfs_dbus_mount_operation_complete_show_unmount_progress (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_operation_complete_aborted (
    GVfsDBusMountOperation *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_mount_operation_call_ask_password (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    const gchar *arg_default_user,
    const gchar *arg_default_domain,
    guint arg_flags_as_int,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_operation_call_ask_password_finish (
    GVfsDBusMountOperation *proxy,
    gboolean *out_handled,
    gboolean *out_aborted,
    gchar **out_password,
    gchar **out_username,
    gchar **out_domain,
    gboolean *out_anonymous,
    guint *out_password_save,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_operation_call_ask_password_sync (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    const gchar *arg_default_user,
    const gchar *arg_default_domain,
    guint arg_flags_as_int,
    gboolean *out_handled,
    gboolean *out_aborted,
    gchar **out_password,
    gchar **out_username,
    gchar **out_domain,
    gboolean *out_anonymous,
    guint *out_password_save,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_operation_call_ask_question (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    const gchar *const *arg_choices,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_operation_call_ask_question_finish (
    GVfsDBusMountOperation *proxy,
    gboolean *out_handled,
    gboolean *out_aborted,
    guint *out_choice,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_operation_call_ask_question_sync (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    const gchar *const *arg_choices,
    gboolean *out_handled,
    gboolean *out_aborted,
    guint *out_choice,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_operation_call_show_processes (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    const gchar *const *arg_choices,
    GVariant *arg_processes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_operation_call_show_processes_finish (
    GVfsDBusMountOperation *proxy,
    gboolean *out_handled,
    gboolean *out_aborted,
    guint *out_choice,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_operation_call_show_processes_sync (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    const gchar *const *arg_choices,
    GVariant *arg_processes,
    gboolean *out_handled,
    gboolean *out_aborted,
    guint *out_choice,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_operation_call_show_unmount_progress (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    gint64 arg_time_left,
    gint64 arg_bytes_left,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_operation_call_show_unmount_progress_finish (
    GVfsDBusMountOperation *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_operation_call_show_unmount_progress_sync (
    GVfsDBusMountOperation *proxy,
    const gchar *arg_message_string,
    gint64 arg_time_left,
    gint64 arg_bytes_left,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_operation_call_aborted (
    GVfsDBusMountOperation *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_operation_call_aborted_finish (
    GVfsDBusMountOperation *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_operation_call_aborted_sync (
    GVfsDBusMountOperation *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_MOUNT_OPERATION_PROXY (gvfs_dbus_mount_operation_proxy_get_type ())
#define GVFS_DBUS_MOUNT_OPERATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION_PROXY, GVfsDBusMountOperationProxy))
#define GVFS_DBUS_MOUNT_OPERATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNT_OPERATION_PROXY, GVfsDBusMountOperationProxyClass))
#define GVFS_DBUS_MOUNT_OPERATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION_PROXY, GVfsDBusMountOperationProxyClass))
#define GVFS_DBUS_IS_MOUNT_OPERATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION_PROXY))
#define GVFS_DBUS_IS_MOUNT_OPERATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNT_OPERATION_PROXY))

typedef struct _GVfsDBusMountOperationProxy GVfsDBusMountOperationProxy;
typedef struct _GVfsDBusMountOperationProxyClass GVfsDBusMountOperationProxyClass;
typedef struct _GVfsDBusMountOperationProxyPrivate GVfsDBusMountOperationProxyPrivate;

struct _GVfsDBusMountOperationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusMountOperationProxyPrivate *priv;
};

struct _GVfsDBusMountOperationProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_mount_operation_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_mount_operation_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMountOperation *gvfs_dbus_mount_operation_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMountOperation *gvfs_dbus_mount_operation_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_mount_operation_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMountOperation *gvfs_dbus_mount_operation_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMountOperation *gvfs_dbus_mount_operation_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_MOUNT_OPERATION_SKELETON (gvfs_dbus_mount_operation_skeleton_get_type ())
#define GVFS_DBUS_MOUNT_OPERATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION_SKELETON, GVfsDBusMountOperationSkeleton))
#define GVFS_DBUS_MOUNT_OPERATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNT_OPERATION_SKELETON, GVfsDBusMountOperationSkeletonClass))
#define GVFS_DBUS_MOUNT_OPERATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION_SKELETON, GVfsDBusMountOperationSkeletonClass))
#define GVFS_DBUS_IS_MOUNT_OPERATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_OPERATION_SKELETON))
#define GVFS_DBUS_IS_MOUNT_OPERATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNT_OPERATION_SKELETON))

typedef struct _GVfsDBusMountOperationSkeleton GVfsDBusMountOperationSkeleton;
typedef struct _GVfsDBusMountOperationSkeletonClass GVfsDBusMountOperationSkeletonClass;
typedef struct _GVfsDBusMountOperationSkeletonPrivate GVfsDBusMountOperationSkeletonPrivate;

struct _GVfsDBusMountOperationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusMountOperationSkeletonPrivate *priv;
};

struct _GVfsDBusMountOperationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_mount_operation_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusMountOperation *gvfs_dbus_mount_operation_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Mount */

#define GVFS_DBUS_TYPE_MOUNT (gvfs_dbus_mount_get_type ())
#define GVFS_DBUS_MOUNT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT, GVfsDBusMount))
#define GVFS_DBUS_IS_MOUNT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT))
#define GVFS_DBUS_MOUNT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_MOUNT, GVfsDBusMountIface))

struct _GVfsDBusMount;
typedef struct _GVfsDBusMount GVfsDBusMount;
typedef struct _GVfsDBusMountIface GVfsDBusMountIface;

struct _GVfsDBusMountIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_copy) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path1_data,
    const gchar *arg_path2_data,
    guint arg_flags,
    const gchar *arg_progress_obj_path);

  gboolean (*handle_create_directory_monitor) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    guint arg_flags);

  gboolean (*handle_create_file_monitor) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    guint arg_flags);

  gboolean (*handle_delete) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data);

  gboolean (*handle_eject_mountable) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path);

  gboolean (*handle_enumerate) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_obj_path,
    const gchar *arg_attributes,
    guint arg_flags,
    const gchar *arg_uri);

  gboolean (*handle_make_directory) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data);

  gboolean (*handle_make_symbolic_link) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_symlink_value);

  gboolean (*handle_mount_mountable) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path);

  gboolean (*handle_move) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path1_data,
    const gchar *arg_path2_data,
    guint arg_flags,
    const gchar *arg_progress_obj_path);

  gboolean (*handle_open_for_read) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_path_data,
    guint arg_pid);

  gboolean (*handle_open_for_write) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_path_data,
    guint16 arg_mode,
    const gchar *arg_etag,
    gboolean arg_make_backup,
    guint arg_flags,
    guint arg_pid);

  gboolean (*handle_open_for_write_flags) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_path_data,
    guint16 arg_mode,
    const gchar *arg_etag,
    gboolean arg_make_backup,
    guint arg_flags,
    guint arg_pid);

  gboolean (*handle_open_icon_for_read) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_path_data);

  gboolean (*handle_poll_mountable) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data);

  gboolean (*handle_pull) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_local_path,
    gboolean arg_send_progress,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    gboolean arg_remove_source);

  gboolean (*handle_push) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_local_path,
    gboolean arg_send_progress,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    gboolean arg_remove_source);

  gboolean (*handle_query_filesystem_info) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_attributes);

  gboolean (*handle_query_info) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_attributes,
    guint arg_flags,
    const gchar *arg_uri);

  gboolean (*handle_query_settable_attributes) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data);

  gboolean (*handle_query_writable_namespaces) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data);

  gboolean (*handle_set_attribute) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    guint arg_flags,
    GVariant *arg_attribute);

  gboolean (*handle_set_display_name) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_display_name);

  gboolean (*handle_start_mountable) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path);

  gboolean (*handle_stop_mountable) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path);

  gboolean (*handle_trash) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data);

  gboolean (*handle_unmount) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    guint arg_flags);

  gboolean (*handle_unmount_mountable) (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path);

};

GType gvfs_dbus_mount_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_mount_interface_info (void);
guint gvfs_dbus_mount_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_mount_complete_unmount (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_open_for_read (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *fd_id,
    gboolean can_seek);

void gvfs_dbus_mount_complete_open_for_write (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *fd_id,
    gboolean can_seek,
    guint64 initial_offset);

void gvfs_dbus_mount_complete_open_for_write_flags (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *fd_id,
    guint flags,
    guint64 initial_offset);

void gvfs_dbus_mount_complete_query_info (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void gvfs_dbus_mount_complete_query_filesystem_info (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void gvfs_dbus_mount_complete_enumerate (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_create_directory_monitor (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *obj_path);

void gvfs_dbus_mount_complete_create_file_monitor (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *obj_path);

void gvfs_dbus_mount_complete_mount_mountable (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    gboolean is_uri,
    const gchar *path,
    gboolean must_mount_location,
    GVariant *mount_spec);

void gvfs_dbus_mount_complete_unmount_mountable (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_eject_mountable (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_start_mountable (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_stop_mountable (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_poll_mountable (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_set_display_name (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    const gchar *new_path);

void gvfs_dbus_mount_complete_delete (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_trash (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_make_directory (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_make_symbolic_link (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_copy (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_move (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_push (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_pull (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_set_attribute (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_mount_complete_query_settable_attributes (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GVariant *list);

void gvfs_dbus_mount_complete_query_writable_namespaces (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GVariant *list);

void gvfs_dbus_mount_complete_open_icon_for_read (
    GVfsDBusMount *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *fd_id,
    gboolean can_seek);



/* D-Bus method calls: */
void gvfs_dbus_mount_call_unmount (
    GVfsDBusMount *proxy,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_unmount_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_unmount_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    guint arg_flags,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_open_for_read (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_pid,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_open_for_read_finish (
    GVfsDBusMount *proxy,
    GVariant **out_fd_id,
    gboolean *out_can_seek,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_open_for_read_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_pid,
    GUnixFDList  *fd_list,
    GVariant **out_fd_id,
    gboolean *out_can_seek,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_open_for_write (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint16 arg_mode,
    const gchar *arg_etag,
    gboolean arg_make_backup,
    guint arg_flags,
    guint arg_pid,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_open_for_write_finish (
    GVfsDBusMount *proxy,
    GVariant **out_fd_id,
    gboolean *out_can_seek,
    guint64 *out_initial_offset,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_open_for_write_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint16 arg_mode,
    const gchar *arg_etag,
    gboolean arg_make_backup,
    guint arg_flags,
    guint arg_pid,
    GUnixFDList  *fd_list,
    GVariant **out_fd_id,
    gboolean *out_can_seek,
    guint64 *out_initial_offset,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_open_for_write_flags (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint16 arg_mode,
    const gchar *arg_etag,
    gboolean arg_make_backup,
    guint arg_flags,
    guint arg_pid,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_open_for_write_flags_finish (
    GVfsDBusMount *proxy,
    GVariant **out_fd_id,
    guint *out_flags,
    guint64 *out_initial_offset,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_open_for_write_flags_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint16 arg_mode,
    const gchar *arg_etag,
    gboolean arg_make_backup,
    guint arg_flags,
    guint arg_pid,
    GUnixFDList  *fd_list,
    GVariant **out_fd_id,
    guint *out_flags,
    guint64 *out_initial_offset,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_query_info (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_attributes,
    guint arg_flags,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_query_info_finish (
    GVfsDBusMount *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_query_info_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_attributes,
    guint arg_flags,
    const gchar *arg_uri,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_query_filesystem_info (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_attributes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_query_filesystem_info_finish (
    GVfsDBusMount *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_query_filesystem_info_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_attributes,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_enumerate (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_obj_path,
    const gchar *arg_attributes,
    guint arg_flags,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_enumerate_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_enumerate_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_obj_path,
    const gchar *arg_attributes,
    guint arg_flags,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_create_directory_monitor (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_create_directory_monitor_finish (
    GVfsDBusMount *proxy,
    gchar **out_obj_path,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_create_directory_monitor_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    gchar **out_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_create_file_monitor (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_create_file_monitor_finish (
    GVfsDBusMount *proxy,
    gchar **out_obj_path,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_create_file_monitor_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    gchar **out_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_mount_mountable (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_mount_mountable_finish (
    GVfsDBusMount *proxy,
    gboolean *out_is_uri,
    gchar **out_path,
    gboolean *out_must_mount_location,
    GVariant **out_mount_spec,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_mount_mountable_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    gboolean *out_is_uri,
    gchar **out_path,
    gboolean *out_must_mount_location,
    GVariant **out_mount_spec,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_unmount_mountable (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_unmount_mountable_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_unmount_mountable_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_eject_mountable (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_eject_mountable_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_eject_mountable_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_start_mountable (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_start_mountable_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_start_mountable_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_stop_mountable (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_stop_mountable_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_stop_mountable_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    const gchar *arg_dbus_id,
    const gchar *arg_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_poll_mountable (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_poll_mountable_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_poll_mountable_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_set_display_name (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_display_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_set_display_name_finish (
    GVfsDBusMount *proxy,
    gchar **out_new_path,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_set_display_name_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_display_name,
    gchar **out_new_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_delete (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_delete_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_delete_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_trash (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_trash_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_trash_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_make_directory (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_make_directory_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_make_directory_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_make_symbolic_link (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_symlink_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_make_symbolic_link_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_make_symbolic_link_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_symlink_value,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_copy (
    GVfsDBusMount *proxy,
    const gchar *arg_path1_data,
    const gchar *arg_path2_data,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_copy_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_copy_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path1_data,
    const gchar *arg_path2_data,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_move (
    GVfsDBusMount *proxy,
    const gchar *arg_path1_data,
    const gchar *arg_path2_data,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_move_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_move_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path1_data,
    const gchar *arg_path2_data,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_push (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_local_path,
    gboolean arg_send_progress,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    gboolean arg_remove_source,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_push_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_push_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_local_path,
    gboolean arg_send_progress,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    gboolean arg_remove_source,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_pull (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_local_path,
    gboolean arg_send_progress,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    gboolean arg_remove_source,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_pull_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_pull_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    const gchar *arg_local_path,
    gboolean arg_send_progress,
    guint arg_flags,
    const gchar *arg_progress_obj_path,
    gboolean arg_remove_source,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_set_attribute (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    GVariant *arg_attribute,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_set_attribute_finish (
    GVfsDBusMount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_set_attribute_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    guint arg_flags,
    GVariant *arg_attribute,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_query_settable_attributes (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_query_settable_attributes_finish (
    GVfsDBusMount *proxy,
    GVariant **out_list,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_query_settable_attributes_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GVariant **out_list,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_query_writable_namespaces (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_query_writable_namespaces_finish (
    GVfsDBusMount *proxy,
    GVariant **out_list,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_query_writable_namespaces_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GVariant **out_list,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_mount_call_open_icon_for_read (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_mount_call_open_icon_for_read_finish (
    GVfsDBusMount *proxy,
    GVariant **out_fd_id,
    gboolean *out_can_seek,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_mount_call_open_icon_for_read_sync (
    GVfsDBusMount *proxy,
    const gchar *arg_path_data,
    GUnixFDList  *fd_list,
    GVariant **out_fd_id,
    gboolean *out_can_seek,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_MOUNT_PROXY (gvfs_dbus_mount_proxy_get_type ())
#define GVFS_DBUS_MOUNT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_PROXY, GVfsDBusMountProxy))
#define GVFS_DBUS_MOUNT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNT_PROXY, GVfsDBusMountProxyClass))
#define GVFS_DBUS_MOUNT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNT_PROXY, GVfsDBusMountProxyClass))
#define GVFS_DBUS_IS_MOUNT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_PROXY))
#define GVFS_DBUS_IS_MOUNT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNT_PROXY))

typedef struct _GVfsDBusMountProxy GVfsDBusMountProxy;
typedef struct _GVfsDBusMountProxyClass GVfsDBusMountProxyClass;
typedef struct _GVfsDBusMountProxyPrivate GVfsDBusMountProxyPrivate;

struct _GVfsDBusMountProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusMountProxyPrivate *priv;
};

struct _GVfsDBusMountProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_mount_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_mount_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMount *gvfs_dbus_mount_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMount *gvfs_dbus_mount_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_mount_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMount *gvfs_dbus_mount_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMount *gvfs_dbus_mount_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_MOUNT_SKELETON (gvfs_dbus_mount_skeleton_get_type ())
#define GVFS_DBUS_MOUNT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MOUNT_SKELETON, GVfsDBusMountSkeleton))
#define GVFS_DBUS_MOUNT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MOUNT_SKELETON, GVfsDBusMountSkeletonClass))
#define GVFS_DBUS_MOUNT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MOUNT_SKELETON, GVfsDBusMountSkeletonClass))
#define GVFS_DBUS_IS_MOUNT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MOUNT_SKELETON))
#define GVFS_DBUS_IS_MOUNT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MOUNT_SKELETON))

typedef struct _GVfsDBusMountSkeleton GVfsDBusMountSkeleton;
typedef struct _GVfsDBusMountSkeletonClass GVfsDBusMountSkeletonClass;
typedef struct _GVfsDBusMountSkeletonPrivate GVfsDBusMountSkeletonPrivate;

struct _GVfsDBusMountSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusMountSkeletonPrivate *priv;
};

struct _GVfsDBusMountSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_mount_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusMount *gvfs_dbus_mount_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Enumerator */

#define GVFS_DBUS_TYPE_ENUMERATOR (gvfs_dbus_enumerator_get_type ())
#define GVFS_DBUS_ENUMERATOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_ENUMERATOR, GVfsDBusEnumerator))
#define GVFS_DBUS_IS_ENUMERATOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_ENUMERATOR))
#define GVFS_DBUS_ENUMERATOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_ENUMERATOR, GVfsDBusEnumeratorIface))

struct _GVfsDBusEnumerator;
typedef struct _GVfsDBusEnumerator GVfsDBusEnumerator;
typedef struct _GVfsDBusEnumeratorIface GVfsDBusEnumeratorIface;

struct _GVfsDBusEnumeratorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_done) (
    GVfsDBusEnumerator *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_got_info) (
    GVfsDBusEnumerator *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_infos);

};

GType gvfs_dbus_enumerator_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_enumerator_interface_info (void);
guint gvfs_dbus_enumerator_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_enumerator_complete_done (
    GVfsDBusEnumerator *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_enumerator_complete_got_info (
    GVfsDBusEnumerator *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_enumerator_call_done (
    GVfsDBusEnumerator *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_enumerator_call_done_finish (
    GVfsDBusEnumerator *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_enumerator_call_done_sync (
    GVfsDBusEnumerator *proxy,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_enumerator_call_got_info (
    GVfsDBusEnumerator *proxy,
    GVariant *arg_infos,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_enumerator_call_got_info_finish (
    GVfsDBusEnumerator *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_enumerator_call_got_info_sync (
    GVfsDBusEnumerator *proxy,
    GVariant *arg_infos,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_ENUMERATOR_PROXY (gvfs_dbus_enumerator_proxy_get_type ())
#define GVFS_DBUS_ENUMERATOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_ENUMERATOR_PROXY, GVfsDBusEnumeratorProxy))
#define GVFS_DBUS_ENUMERATOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_ENUMERATOR_PROXY, GVfsDBusEnumeratorProxyClass))
#define GVFS_DBUS_ENUMERATOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_ENUMERATOR_PROXY, GVfsDBusEnumeratorProxyClass))
#define GVFS_DBUS_IS_ENUMERATOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_ENUMERATOR_PROXY))
#define GVFS_DBUS_IS_ENUMERATOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_ENUMERATOR_PROXY))

typedef struct _GVfsDBusEnumeratorProxy GVfsDBusEnumeratorProxy;
typedef struct _GVfsDBusEnumeratorProxyClass GVfsDBusEnumeratorProxyClass;
typedef struct _GVfsDBusEnumeratorProxyPrivate GVfsDBusEnumeratorProxyPrivate;

struct _GVfsDBusEnumeratorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusEnumeratorProxyPrivate *priv;
};

struct _GVfsDBusEnumeratorProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_enumerator_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_enumerator_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusEnumerator *gvfs_dbus_enumerator_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusEnumerator *gvfs_dbus_enumerator_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_enumerator_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusEnumerator *gvfs_dbus_enumerator_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusEnumerator *gvfs_dbus_enumerator_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_ENUMERATOR_SKELETON (gvfs_dbus_enumerator_skeleton_get_type ())
#define GVFS_DBUS_ENUMERATOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_ENUMERATOR_SKELETON, GVfsDBusEnumeratorSkeleton))
#define GVFS_DBUS_ENUMERATOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_ENUMERATOR_SKELETON, GVfsDBusEnumeratorSkeletonClass))
#define GVFS_DBUS_ENUMERATOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_ENUMERATOR_SKELETON, GVfsDBusEnumeratorSkeletonClass))
#define GVFS_DBUS_IS_ENUMERATOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_ENUMERATOR_SKELETON))
#define GVFS_DBUS_IS_ENUMERATOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_ENUMERATOR_SKELETON))

typedef struct _GVfsDBusEnumeratorSkeleton GVfsDBusEnumeratorSkeleton;
typedef struct _GVfsDBusEnumeratorSkeletonClass GVfsDBusEnumeratorSkeletonClass;
typedef struct _GVfsDBusEnumeratorSkeletonPrivate GVfsDBusEnumeratorSkeletonPrivate;

struct _GVfsDBusEnumeratorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusEnumeratorSkeletonPrivate *priv;
};

struct _GVfsDBusEnumeratorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_enumerator_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusEnumerator *gvfs_dbus_enumerator_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Progress */

#define GVFS_DBUS_TYPE_PROGRESS (gvfs_dbus_progress_get_type ())
#define GVFS_DBUS_PROGRESS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_PROGRESS, GVfsDBusProgress))
#define GVFS_DBUS_IS_PROGRESS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_PROGRESS))
#define GVFS_DBUS_PROGRESS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_PROGRESS, GVfsDBusProgressIface))

struct _GVfsDBusProgress;
typedef struct _GVfsDBusProgress GVfsDBusProgress;
typedef struct _GVfsDBusProgressIface GVfsDBusProgressIface;

struct _GVfsDBusProgressIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_progress) (
    GVfsDBusProgress *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_current,
    guint64 arg_total);

};

GType gvfs_dbus_progress_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_progress_interface_info (void);
guint gvfs_dbus_progress_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_progress_complete_progress (
    GVfsDBusProgress *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_progress_call_progress (
    GVfsDBusProgress *proxy,
    guint64 arg_current,
    guint64 arg_total,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_progress_call_progress_finish (
    GVfsDBusProgress *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_progress_call_progress_sync (
    GVfsDBusProgress *proxy,
    guint64 arg_current,
    guint64 arg_total,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_PROGRESS_PROXY (gvfs_dbus_progress_proxy_get_type ())
#define GVFS_DBUS_PROGRESS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_PROGRESS_PROXY, GVfsDBusProgressProxy))
#define GVFS_DBUS_PROGRESS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_PROGRESS_PROXY, GVfsDBusProgressProxyClass))
#define GVFS_DBUS_PROGRESS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_PROGRESS_PROXY, GVfsDBusProgressProxyClass))
#define GVFS_DBUS_IS_PROGRESS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_PROGRESS_PROXY))
#define GVFS_DBUS_IS_PROGRESS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_PROGRESS_PROXY))

typedef struct _GVfsDBusProgressProxy GVfsDBusProgressProxy;
typedef struct _GVfsDBusProgressProxyClass GVfsDBusProgressProxyClass;
typedef struct _GVfsDBusProgressProxyPrivate GVfsDBusProgressProxyPrivate;

struct _GVfsDBusProgressProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusProgressProxyPrivate *priv;
};

struct _GVfsDBusProgressProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_progress_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_progress_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusProgress *gvfs_dbus_progress_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusProgress *gvfs_dbus_progress_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_progress_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusProgress *gvfs_dbus_progress_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusProgress *gvfs_dbus_progress_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_PROGRESS_SKELETON (gvfs_dbus_progress_skeleton_get_type ())
#define GVFS_DBUS_PROGRESS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_PROGRESS_SKELETON, GVfsDBusProgressSkeleton))
#define GVFS_DBUS_PROGRESS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_PROGRESS_SKELETON, GVfsDBusProgressSkeletonClass))
#define GVFS_DBUS_PROGRESS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_PROGRESS_SKELETON, GVfsDBusProgressSkeletonClass))
#define GVFS_DBUS_IS_PROGRESS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_PROGRESS_SKELETON))
#define GVFS_DBUS_IS_PROGRESS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_PROGRESS_SKELETON))

typedef struct _GVfsDBusProgressSkeleton GVfsDBusProgressSkeleton;
typedef struct _GVfsDBusProgressSkeletonClass GVfsDBusProgressSkeletonClass;
typedef struct _GVfsDBusProgressSkeletonPrivate GVfsDBusProgressSkeletonPrivate;

struct _GVfsDBusProgressSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusProgressSkeletonPrivate *priv;
};

struct _GVfsDBusProgressSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_progress_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusProgress *gvfs_dbus_progress_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Monitor */

#define GVFS_DBUS_TYPE_MONITOR (gvfs_dbus_monitor_get_type ())
#define GVFS_DBUS_MONITOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MONITOR, GVfsDBusMonitor))
#define GVFS_DBUS_IS_MONITOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MONITOR))
#define GVFS_DBUS_MONITOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_MONITOR, GVfsDBusMonitorIface))

struct _GVfsDBusMonitor;
typedef struct _GVfsDBusMonitor GVfsDBusMonitor;
typedef struct _GVfsDBusMonitorIface GVfsDBusMonitorIface;

struct _GVfsDBusMonitorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_subscribe) (
    GVfsDBusMonitor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_object_path);

  gboolean (*handle_unsubscribe) (
    GVfsDBusMonitor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_object_path);

};

GType gvfs_dbus_monitor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_monitor_interface_info (void);
guint gvfs_dbus_monitor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_monitor_complete_subscribe (
    GVfsDBusMonitor *object,
    GDBusMethodInvocation *invocation);

void gvfs_dbus_monitor_complete_unsubscribe (
    GVfsDBusMonitor *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_monitor_call_subscribe (
    GVfsDBusMonitor *proxy,
    const gchar *arg_object_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_monitor_call_subscribe_finish (
    GVfsDBusMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_monitor_call_subscribe_sync (
    GVfsDBusMonitor *proxy,
    const gchar *arg_object_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_dbus_monitor_call_unsubscribe (
    GVfsDBusMonitor *proxy,
    const gchar *arg_object_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_monitor_call_unsubscribe_finish (
    GVfsDBusMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_monitor_call_unsubscribe_sync (
    GVfsDBusMonitor *proxy,
    const gchar *arg_object_path,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_MONITOR_PROXY (gvfs_dbus_monitor_proxy_get_type ())
#define GVFS_DBUS_MONITOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MONITOR_PROXY, GVfsDBusMonitorProxy))
#define GVFS_DBUS_MONITOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MONITOR_PROXY, GVfsDBusMonitorProxyClass))
#define GVFS_DBUS_MONITOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MONITOR_PROXY, GVfsDBusMonitorProxyClass))
#define GVFS_DBUS_IS_MONITOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MONITOR_PROXY))
#define GVFS_DBUS_IS_MONITOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MONITOR_PROXY))

typedef struct _GVfsDBusMonitorProxy GVfsDBusMonitorProxy;
typedef struct _GVfsDBusMonitorProxyClass GVfsDBusMonitorProxyClass;
typedef struct _GVfsDBusMonitorProxyPrivate GVfsDBusMonitorProxyPrivate;

struct _GVfsDBusMonitorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusMonitorProxyPrivate *priv;
};

struct _GVfsDBusMonitorProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_monitor_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_monitor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMonitor *gvfs_dbus_monitor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMonitor *gvfs_dbus_monitor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_monitor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMonitor *gvfs_dbus_monitor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMonitor *gvfs_dbus_monitor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_MONITOR_SKELETON (gvfs_dbus_monitor_skeleton_get_type ())
#define GVFS_DBUS_MONITOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MONITOR_SKELETON, GVfsDBusMonitorSkeleton))
#define GVFS_DBUS_MONITOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MONITOR_SKELETON, GVfsDBusMonitorSkeletonClass))
#define GVFS_DBUS_MONITOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MONITOR_SKELETON, GVfsDBusMonitorSkeletonClass))
#define GVFS_DBUS_IS_MONITOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MONITOR_SKELETON))
#define GVFS_DBUS_IS_MONITOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MONITOR_SKELETON))

typedef struct _GVfsDBusMonitorSkeleton GVfsDBusMonitorSkeleton;
typedef struct _GVfsDBusMonitorSkeletonClass GVfsDBusMonitorSkeletonClass;
typedef struct _GVfsDBusMonitorSkeletonPrivate GVfsDBusMonitorSkeletonPrivate;

struct _GVfsDBusMonitorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusMonitorSkeletonPrivate *priv;
};

struct _GVfsDBusMonitorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_monitor_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusMonitor *gvfs_dbus_monitor_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.MonitorClient */

#define GVFS_DBUS_TYPE_MONITOR_CLIENT (gvfs_dbus_monitor_client_get_type ())
#define GVFS_DBUS_MONITOR_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT, GVfsDBusMonitorClient))
#define GVFS_DBUS_IS_MONITOR_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT))
#define GVFS_DBUS_MONITOR_CLIENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT, GVfsDBusMonitorClientIface))

struct _GVfsDBusMonitorClient;
typedef struct _GVfsDBusMonitorClient GVfsDBusMonitorClient;
typedef struct _GVfsDBusMonitorClientIface GVfsDBusMonitorClientIface;

struct _GVfsDBusMonitorClientIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_changed) (
    GVfsDBusMonitorClient *object,
    GDBusMethodInvocation *invocation,
    guint arg_event_type,
    GVariant *arg_mount_spec,
    const gchar *arg_file_path,
    GVariant *arg_other_mount_spec,
    const gchar *arg_other_file_path);

};

GType gvfs_dbus_monitor_client_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_dbus_monitor_client_interface_info (void);
guint gvfs_dbus_monitor_client_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_dbus_monitor_client_complete_changed (
    GVfsDBusMonitorClient *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_dbus_monitor_client_call_changed (
    GVfsDBusMonitorClient *proxy,
    guint arg_event_type,
    GVariant *arg_mount_spec,
    const gchar *arg_file_path,
    GVariant *arg_other_mount_spec,
    const gchar *arg_other_file_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_dbus_monitor_client_call_changed_finish (
    GVfsDBusMonitorClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_dbus_monitor_client_call_changed_sync (
    GVfsDBusMonitorClient *proxy,
    guint arg_event_type,
    GVariant *arg_mount_spec,
    const gchar *arg_file_path,
    GVariant *arg_other_mount_spec,
    const gchar *arg_other_file_path,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_DBUS_TYPE_MONITOR_CLIENT_PROXY (gvfs_dbus_monitor_client_proxy_get_type ())
#define GVFS_DBUS_MONITOR_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT_PROXY, GVfsDBusMonitorClientProxy))
#define GVFS_DBUS_MONITOR_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MONITOR_CLIENT_PROXY, GVfsDBusMonitorClientProxyClass))
#define GVFS_DBUS_MONITOR_CLIENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT_PROXY, GVfsDBusMonitorClientProxyClass))
#define GVFS_DBUS_IS_MONITOR_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT_PROXY))
#define GVFS_DBUS_IS_MONITOR_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MONITOR_CLIENT_PROXY))

typedef struct _GVfsDBusMonitorClientProxy GVfsDBusMonitorClientProxy;
typedef struct _GVfsDBusMonitorClientProxyClass GVfsDBusMonitorClientProxyClass;
typedef struct _GVfsDBusMonitorClientProxyPrivate GVfsDBusMonitorClientProxyPrivate;

struct _GVfsDBusMonitorClientProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsDBusMonitorClientProxyPrivate *priv;
};

struct _GVfsDBusMonitorClientProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_dbus_monitor_client_proxy_get_type (void) G_GNUC_CONST;

void gvfs_dbus_monitor_client_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMonitorClient *gvfs_dbus_monitor_client_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMonitorClient *gvfs_dbus_monitor_client_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_dbus_monitor_client_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsDBusMonitorClient *gvfs_dbus_monitor_client_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsDBusMonitorClient *gvfs_dbus_monitor_client_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_DBUS_TYPE_MONITOR_CLIENT_SKELETON (gvfs_dbus_monitor_client_skeleton_get_type ())
#define GVFS_DBUS_MONITOR_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT_SKELETON, GVfsDBusMonitorClientSkeleton))
#define GVFS_DBUS_MONITOR_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_DBUS_TYPE_MONITOR_CLIENT_SKELETON, GVfsDBusMonitorClientSkeletonClass))
#define GVFS_DBUS_MONITOR_CLIENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT_SKELETON, GVfsDBusMonitorClientSkeletonClass))
#define GVFS_DBUS_IS_MONITOR_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_DBUS_TYPE_MONITOR_CLIENT_SKELETON))
#define GVFS_DBUS_IS_MONITOR_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_DBUS_TYPE_MONITOR_CLIENT_SKELETON))

typedef struct _GVfsDBusMonitorClientSkeleton GVfsDBusMonitorClientSkeleton;
typedef struct _GVfsDBusMonitorClientSkeletonClass GVfsDBusMonitorClientSkeletonClass;
typedef struct _GVfsDBusMonitorClientSkeletonPrivate GVfsDBusMonitorClientSkeletonPrivate;

struct _GVfsDBusMonitorClientSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsDBusMonitorClientSkeletonPrivate *priv;
};

struct _GVfsDBusMonitorClientSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_dbus_monitor_client_skeleton_get_type (void) G_GNUC_CONST;

GVfsDBusMonitorClient *gvfs_dbus_monitor_client_skeleton_new (void);


G_END_DECLS

#endif /* __GVFSDBUS_H__ */
