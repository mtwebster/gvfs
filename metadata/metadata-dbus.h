/*
 * Generated by gdbus-codegen 2.41.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __METADATA_DBUS_H__
#define __METADATA_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.vfs.Metadata */

#define GVFS_TYPE_METADATA (gvfs_metadata_get_type ())
#define GVFS_METADATA(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_TYPE_METADATA, GVfsMetadata))
#define GVFS_IS_METADATA(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_TYPE_METADATA))
#define GVFS_METADATA_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GVFS_TYPE_METADATA, GVfsMetadataIface))

struct _GVfsMetadata;
typedef struct _GVfsMetadata GVfsMetadata;
typedef struct _GVfsMetadataIface GVfsMetadataIface;

struct _GVfsMetadataIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *const *arg_keys);

  gboolean (*handle_move) (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *arg_dest_path);

  gboolean (*handle_remove) (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_treefile,
    const gchar *arg_path);

  gboolean (*handle_set) (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_treefile,
    const gchar *arg_path,
    GVariant *arg_data);

  gboolean (*handle_unset) (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *arg_key);

};

GType gvfs_metadata_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gvfs_metadata_interface_info (void);
guint gvfs_metadata_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gvfs_metadata_complete_set (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation);

void gvfs_metadata_complete_unset (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation);

void gvfs_metadata_complete_get (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);

void gvfs_metadata_complete_remove (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation);

void gvfs_metadata_complete_move (
    GVfsMetadata *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gvfs_metadata_call_set (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    GVariant *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_metadata_call_set_finish (
    GVfsMetadata *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_metadata_call_set_sync (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    GVariant *arg_data,
    GCancellable *cancellable,
    GError **error);

void gvfs_metadata_call_unset (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *arg_key,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_metadata_call_unset_finish (
    GVfsMetadata *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_metadata_call_unset_sync (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *arg_key,
    GCancellable *cancellable,
    GError **error);

void gvfs_metadata_call_get (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *const *arg_keys,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_metadata_call_get_finish (
    GVfsMetadata *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_metadata_call_get_sync (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *const *arg_keys,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);

void gvfs_metadata_call_remove (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_metadata_call_remove_finish (
    GVfsMetadata *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_metadata_call_remove_sync (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void gvfs_metadata_call_move (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *arg_dest_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gvfs_metadata_call_move_finish (
    GVfsMetadata *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gvfs_metadata_call_move_sync (
    GVfsMetadata *proxy,
    const gchar *arg_treefile,
    const gchar *arg_path,
    const gchar *arg_dest_path,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GVFS_TYPE_METADATA_PROXY (gvfs_metadata_proxy_get_type ())
#define GVFS_METADATA_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_TYPE_METADATA_PROXY, GVfsMetadataProxy))
#define GVFS_METADATA_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_TYPE_METADATA_PROXY, GVfsMetadataProxyClass))
#define GVFS_METADATA_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_TYPE_METADATA_PROXY, GVfsMetadataProxyClass))
#define GVFS_IS_METADATA_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_TYPE_METADATA_PROXY))
#define GVFS_IS_METADATA_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_TYPE_METADATA_PROXY))

typedef struct _GVfsMetadataProxy GVfsMetadataProxy;
typedef struct _GVfsMetadataProxyClass GVfsMetadataProxyClass;
typedef struct _GVfsMetadataProxyPrivate GVfsMetadataProxyPrivate;

struct _GVfsMetadataProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GVfsMetadataProxyPrivate *priv;
};

struct _GVfsMetadataProxyClass
{
  GDBusProxyClass parent_class;
};

GType gvfs_metadata_proxy_get_type (void) G_GNUC_CONST;

void gvfs_metadata_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsMetadata *gvfs_metadata_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsMetadata *gvfs_metadata_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gvfs_metadata_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GVfsMetadata *gvfs_metadata_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GVfsMetadata *gvfs_metadata_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GVFS_TYPE_METADATA_SKELETON (gvfs_metadata_skeleton_get_type ())
#define GVFS_METADATA_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GVFS_TYPE_METADATA_SKELETON, GVfsMetadataSkeleton))
#define GVFS_METADATA_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GVFS_TYPE_METADATA_SKELETON, GVfsMetadataSkeletonClass))
#define GVFS_METADATA_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GVFS_TYPE_METADATA_SKELETON, GVfsMetadataSkeletonClass))
#define GVFS_IS_METADATA_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GVFS_TYPE_METADATA_SKELETON))
#define GVFS_IS_METADATA_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GVFS_TYPE_METADATA_SKELETON))

typedef struct _GVfsMetadataSkeleton GVfsMetadataSkeleton;
typedef struct _GVfsMetadataSkeletonClass GVfsMetadataSkeletonClass;
typedef struct _GVfsMetadataSkeletonPrivate GVfsMetadataSkeletonPrivate;

struct _GVfsMetadataSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GVfsMetadataSkeletonPrivate *priv;
};

struct _GVfsMetadataSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gvfs_metadata_skeleton_get_type (void) G_GNUC_CONST;

GVfsMetadata *gvfs_metadata_skeleton_new (void);


G_END_DECLS

#endif /* __METADATA_DBUS_H__ */
